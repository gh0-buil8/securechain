   Compiling securechain v1.0.0 (/home/runner/workspace/SecureChain)
error[E0432]: unresolved import `thiserror`
 --> src/utils/error.rs:6:5
  |
6 | use thiserror::Error;
  |     ^^^^^^^^^ use of undeclared crate or module `thiserror`

error: cannot find attribute `error` in this scope
  --> src/utils/error.rs:12:7
   |
12 |     #[error("IO error: {0}")]
   |       ^^^^^
   |
   = help: have you added the `#[macro_use]` on the module/import?

error: cannot find attribute `from` in this scope
  --> src/utils/error.rs:13:10
   |
13 |     Io(#[from] std::io::Error),
   |          ^^^^

error: cannot find attribute `error` in this scope
  --> src/utils/error.rs:16:7
   |
16 |     #[error("JSON error: {0}")]
   |       ^^^^^
   |
   = help: have you added the `#[macro_use]` on the module/import?

error: cannot find attribute `from` in this scope
  --> src/utils/error.rs:17:12
   |
17 |     Json(#[from] serde_json::Error),
   |            ^^^^

error: cannot find attribute `error` in this scope
  --> src/utils/error.rs:20:7
   |
20 |     #[error("TOML error: {0}")]
   |       ^^^^^
   |
   = help: have you added the `#[macro_use]` on the module/import?

error: cannot find attribute `from` in this scope
  --> src/utils/error.rs:21:12
   |
21 |     Toml(#[from] toml::de::Error),
   |            ^^^^

error: cannot find attribute `error` in this scope
  --> src/utils/error.rs:24:7
   |
24 |     #[error("HTTP error: {0}")]
   |       ^^^^^
   |
   = help: have you added the `#[macro_use]` on the module/import?

error: cannot find attribute `from` in this scope
  --> src/utils/error.rs:25:12
   |
25 |     Http(#[from] reqwest::Error),
   |            ^^^^

error: cannot find attribute `error` in this scope
  --> src/utils/error.rs:28:7
   |
28 |     #[error("Regex error: {0}")]
   |       ^^^^^
   |
   = help: have you added the `#[macro_use]` on the module/import?

error: cannot find attribute `from` in this scope
  --> src/utils/error.rs:29:13
   |
29 |     Regex(#[from] regex::Error),
   |             ^^^^

error: cannot find attribute `error` in this scope
  --> src/utils/error.rs:32:7
   |
32 |     #[error("Configuration error: {message}")]
   |       ^^^^^
   |
   = help: have you added the `#[macro_use]` on the module/import?

error: cannot find attribute `error` in this scope
  --> src/utils/error.rs:36:7
   |
36 |     #[error("Plugin error: {plugin}: {message}")]
   |       ^^^^^
   |
   = help: have you added the `#[macro_use]` on the module/import?

error: cannot find attribute `error` in this scope
  --> src/utils/error.rs:40:7
   |
40 |     #[error("Analysis error: {message}")]
   |       ^^^^^
   |
   = help: have you added the `#[macro_use]` on the module/import?

error: cannot find attribute `error` in this scope
  --> src/utils/error.rs:44:7
   |
44 |     #[error("Contract fetch error: {message}")]
   |       ^^^^^
   |
   = help: have you added the `#[macro_use]` on the module/import?

error: cannot find attribute `error` in this scope
  --> src/utils/error.rs:48:7
   |
48 |     #[error("Contract parse error: {message}")]
   |       ^^^^^
   |
   = help: have you added the `#[macro_use]` on the module/import?

error: cannot find attribute `error` in this scope
  --> src/utils/error.rs:52:7
   |
52 |     #[error("AI assistant error: {message}")]
   |       ^^^^^
   |
   = help: have you added the `#[macro_use]` on the module/import?

error: cannot find attribute `error` in this scope
  --> src/utils/error.rs:56:7
   |
56 |     #[error("Report generation error: {message}")]
   |       ^^^^^
   |
   = help: have you added the `#[macro_use]` on the module/import?

error: cannot find attribute `error` in this scope
  --> src/utils/error.rs:60:7
   |
60 |     #[error("Tool execution error: {tool}: {message}")]
   |       ^^^^^
   |
   = help: have you added the `#[macro_use]` on the module/import?

error: cannot find attribute `error` in this scope
  --> src/utils/error.rs:64:7
   |
64 |     #[error("Network error: {message}")]
   |       ^^^^^
   |
   = help: have you added the `#[macro_use]` on the module/import?

error: cannot find attribute `error` in this scope
  --> src/utils/error.rs:68:7
   |
68 |     #[error("Authentication error: {message}")]
   |       ^^^^^
   |
   = help: have you added the `#[macro_use]` on the module/import?

error: cannot find attribute `error` in this scope
  --> src/utils/error.rs:72:7
   |
72 |     #[error("Rate limit exceeded: {message}")]
   |       ^^^^^
   |
   = help: have you added the `#[macro_use]` on the module/import?

error: cannot find attribute `error` in this scope
  --> src/utils/error.rs:76:7
   |
76 |     #[error("Error: {message}")]
   |       ^^^^^
   |
   = help: have you added the `#[macro_use]` on the module/import?

error[E0106]: missing lifetime specifier
   --> src/report/vulnerability.rs:439:89
    |
439 | ...abilities: &[Vulnerability], severity: &str) -> Vec<&Vulnerability> {
    |               ----------------            ----         ^ expected named lifetime parameter
    |
    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `vulnerabilities` or `severity`
help: consider introducing a named lifetime parameter
    |
439 |     pub fn filter_by_severity<'a>(vulnerabilities: &'a [Vulnerability], severity: &'a str) -> Vec<&'a Vulnerability> {
    |                              ++++                   ++                             ++              ++

error[E0106]: missing lifetime specifier
   --> src/report/vulnerability.rs:444:107
    |
444 | ...s: &[Vulnerability], category: &VulnerabilityCategory) -> Vec<&Vulne...
    |       ----------------            ----------------------         ^ expected named lifetime parameter
    |
    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `vulnerabilities` or `category`
help: consider introducing a named lifetime parameter
    |
444 |     pub fn filter_by_category<'a>(vulnerabilities: &'a [Vulnerability], category: &'a VulnerabilityCategory) -> Vec<&'a Vulnerability> {
    |                              ++++                   ++                             ++                                ++

warning: unused import: `std::path::PathBuf`
  --> src/main.rs:10:5
   |
10 | use std::path::PathBuf;
   |     ^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `commands::*`
 --> src/cli/mod.rs:8:9
  |
8 | pub use commands::*;
  |         ^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> src/core/analyzer.rs:8:5
  |
8 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `anyhow`
 --> src/core/parser.rs:6:14
  |
6 | use anyhow::{anyhow, Result};
  |              ^^^^^^

warning: unused import: `std::collections::HashMap`
 --> src/core/ai_assist.rs:9:5
  |
9 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `anyhow`
 --> src/core/fuzz_engine.rs:6:14
  |
6 | use anyhow::{anyhow, Result};
  |              ^^^^^^

warning: unused import: `std::collections::HashMap`
 --> src/core/fuzz_engine.rs:8:5
  |
8 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `analyzer::*`
  --> src/core/mod.rs:12:9
   |
12 | pub use analyzer::*;
   |         ^^^^^^^^^^^

warning: unused import: `fetcher::*`
  --> src/core/mod.rs:13:9
   |
13 | pub use fetcher::*;
   |         ^^^^^^^^^^

warning: unused import: `parser::*`
  --> src/core/mod.rs:14:9
   |
14 | pub use parser::*;
   |         ^^^^^^^^^

warning: unused import: `ai_assist::*`
  --> src/core/mod.rs:15:9
   |
15 | pub use ai_assist::*;
   |         ^^^^^^^^^^^^

warning: unused import: `fuzz_engine::*`
  --> src/core/mod.rs:16:9
   |
16 | pub use fuzz_engine::*;
   |         ^^^^^^^^^^^^^^

warning: unused import: `anyhow`
 --> src/plugins/evm.rs:6:14
  |
6 | use anyhow::{anyhow, Result};
  |              ^^^^^^

warning: unused import: `anyhow`
 --> src/plugins/move_lang.rs:6:14
  |
6 | use anyhow::{anyhow, Result};
  |              ^^^^^^

warning: unused import: `anyhow`
 --> src/plugins/cairo.rs:6:14
  |
6 | use anyhow::{anyhow, Result};
  |              ^^^^^^

warning: unused import: `anyhow`
 --> src/plugins/ink.rs:6:14
  |
6 | use anyhow::{anyhow, Result};
  |              ^^^^^^

warning: unused import: `AnalysisSummary`
  --> src/report/generator.rs:12:63
   |
12 | ...sResults, AnalysisMetrics, AnalysisSummary};
   |                               ^^^^^^^^^^^^^^^

warning: unused import: `generator::*`
 --> src/report/mod.rs:9:9
  |
9 | pub use generator::*;
  |         ^^^^^^^^^^^^

warning: unused import: `vulnerability::*`
  --> src/report/mod.rs:10:9
   |
10 | pub use vulnerability::*;
   |         ^^^^^^^^^^^^^^^^

warning: unused import: `config::*`
  --> src/utils/mod.rs:10:9
   |
10 | pub use config::*;
   |         ^^^^^^^^^

warning: unused import: `error::*`
  --> src/utils/mod.rs:11:9
   |
11 | pub use error::*;
   |         ^^^^^^^^

error[E0433]: failed to resolve: use of undeclared crate or module `urlencoding`
   --> src/core/fetcher.rs:165:13
    |
165 |             urlencoding::encode(query)
    |             ^^^^^^^^^^^ use of undeclared crate or module `urlencoding`

error[E0624]: method `fetch_from_local` is private
   --> src/core/analyzer.rs:98:33
    |
98  | ...   let contracts = fetcher.fetch_from_local(input_path.to_str().unwr...
    |                               ^^^^^^^^^^^^^^^^ private method
    |
   ::: src/core/fetcher.rs:208:5
    |
208 |     async fn fetch_from_local(&self, path: &str) -> Result<Vec<ContractInfo>...
    |     ------------------------------------------------------------------------- private method defined here

error[E0624]: method `fetch_from_local` is private
   --> src/core/analyzer.rs:176:33
    |
176 | ...   let contracts = fetcher.fetch_from_local(input_path.to_str().unwr...
    |                               ^^^^^^^^^^^^^^^^ private method
    |
   ::: src/core/fetcher.rs:208:5
    |
208 |     async fn fetch_from_local(&self, path: &str) -> Result<Vec<ContractInfo>...
    |     ------------------------------------------------------------------------- private method defined here

error[E0624]: method `fetch_from_local` is private
   --> src/cli/commands.rs:565:29
    |
565 |     let contracts = fetcher.fetch_from_local(input.to_str().unwrap()).a...
    |                             ^^^^^^^^^^^^^^^^ private method
    |
   ::: src/core/fetcher.rs:208:5
    |
208 |     async fn fetch_from_local(&self, path: &str) -> Result<Vec<ContractInfo>...
    |     ------------------------------------------------------------------------- private method defined here

error[E0308]: mismatched types
   --> src/report/generator.rs:414:57
    |
414 |             "markdown" => self.generate_markdown_report(&report),
    |                                ------------------------ ^^^^^^^ expected `&AnalysisResults`, found `&ComprehensiveReport`
    |                                |
    |                                arguments to this method are incorrect
    |
    = note: expected reference `&AnalysisResults`
               found reference `&ComprehensiveReport`
note: method defined here
   --> src/report/generator.rs:423:12
    |
423 | ...b fn generate_markdown_report(&self, results: &AnalysisResults) -> R...
    |         ^^^^^^^^^^^^^^^^^^^^^^^^        -------------------------

warning: unused variable: `contract`
   --> src/core/analyzer.rs:346:37
    |
346 | ...run_move_prover(&self, contract: &ParsedContract) -> Result<Vec<Vuln...
    |                           ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_contract`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `contract`
   --> src/core/analyzer.rs:354:40
    |
354 | ..._cairo_analysis(&self, contract: &ParsedContract) -> Result<Vec<Vuln...
    |                           ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_contract`

warning: unused variable: `contract`
   --> src/core/fuzz_engine.rs:295:9
    |
295 |         contract: &ParsedContract,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_contract`

error[E0592]: duplicate definitions with name `generate_markdown_report`
   --> src/report/generator.rs:706:5
    |
423 |     pub fn generate_markdown_report(&self, results: &AnalysisResults) -> Result<String...
    |     ----------------------------------------------------------------------------------- other definition for `generate_markdown_report`
...
706 |     fn generate_markdown_report(&self, report: &ComprehensiveReport) -> Result<String...
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `generate_markdown_report`

error[E0689]: can't call method `max` on ambiguous numeric type `{float}`
   --> src/core/analyzer.rs:568:15
    |
568 |         score.max(0.0)
    |               ^^^
    |
help: you must specify a type for this binding, like `f32`
    |
555 |         let mut score: f32 = 100.0;
    |                      +++++

error[E0277]: the trait bound `&std::string::String: Borrow<&str>` is not satisfied
   --> src/report/generator.rs:252:50
    |
252 |             if let Some(vulns) = by_severity.get(severity) {
    |                                              --- ^^^^^^^^ the trait `Borrow<&str>` is not implemented for `&std::string::String`
    |                                              |
    |                                              required by a bound introduced by this call
    |
    = help: the trait `Borrow<str>` is implemented for `std::string::String`
note: required by a bound in `HashMap::<K, V, S>::get`
   --> /nix/store/y5k023q95ndaiiw8f5x0krkgdvq54h6c-rust-mixed/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:899:12
    |
897 |     pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
    |            --- required by a bound in this associated function
898 |     where
899 |         K: Borrow<Q>,
    |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get`

error[E0308]: mismatched types
   --> src/report/generator.rs:425:39
    |
425 |         self.generate_markdown_report(&report)
    |              ------------------------ ^^^^^^^ expected `&AnalysisResults`, found `&ComprehensiveReport`
    |              |
    |              arguments to this method are incorrect
    |
    = note: expected reference `&AnalysisResults`
               found reference `&ComprehensiveReport`
note: method defined here
   --> src/report/generator.rs:423:12
    |
423 | ...b fn generate_markdown_report(&self, results: &AnalysisResults) -> R...
    |         ^^^^^^^^^^^^^^^^^^^^^^^^        -------------------------

error[E0308]: mismatched types
   --> src/report/generator.rs:837:54
    |
837 |         let markdown = self.generate_markdown_report(report)?;
    |                             ------------------------ ^^^^^^ expected `&AnalysisResults`, found `&ComprehensiveReport`
    |                             |
    |                             arguments to this method are incorrect
    |
    = note: expected reference `&AnalysisResults`
               found reference `&ComprehensiveReport`
note: method defined here
   --> src/report/generator.rs:423:12
    |
423 | ...b fn generate_markdown_report(&self, results: &AnalysisResults) -> R...
    |         ^^^^^^^^^^^^^^^^^^^^^^^^        -------------------------

error[E0433]: failed to resolve: use of undeclared crate or module `dirs`
   --> src/utils/config.rs:340:33
    |
340 |         if let Some(home_dir) = dirs::home_dir() {
    |                                 ^^^^ use of undeclared crate or module `dirs`

error[E0433]: failed to resolve: use of undeclared crate or module `dirs`
   --> src/utils/config.rs:478:9
    |
478 | ...   dirs::home_dir().map(|home| home.join(".config/bugforgex/config.t...
    |       ^^^^ use of undeclared crate or module `dirs`

error[E0433]: failed to resolve: use of undeclared crate or module `dirs`
   --> src/utils/config.rs:483:26
    |
483 |         let config_dir = dirs::home_dir()
    |                          ^^^^ use of undeclared crate or module `dirs`

error[E0433]: failed to resolve: use of undeclared crate or module `dirs`
   --> src/utils/config.rs:525:24
    |
525 | ...   let home_dir = dirs::home_dir().unwrap_or_else(|| PathBuf::from("...
    |                      ^^^^ use of undeclared crate or module `dirs`

error[E0277]: `utils::error::BugForgeXError` doesn't implement `std::fmt::Display`
   --> src/utils/error.rs:212:27
    |
212 |         log::error!("{}", err);
    |                           ^^^ `utils::error::BugForgeXError` cannot be formatted with the default formatter
    |
    = help: the trait `std::fmt::Display` is not implemented for `utils::error::BugForgeXError`
    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead
    = note: this error originates in the macro `$crate::__private_api::format_args` which comes from the expansion of the macro `log::error` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no function or associated item named `load_or_default` found for struct `config::Config` in the current scope
   --> src/main.rs:41:26
    |
41  |     let config = Config::load_or_default()?;
    |                          ^^^^^^^^^^^^^^^ function or associated item not found in `Config`
    |
   ::: src/utils/config.rs:14:1
    |
14  | pub struct Config {
    | ----------------- function or associated item `load_or_default` not found for this struct
    |
note: if you're trying to build a new `config::Config` consider using one of the following associated functions:
      config::Config::load
      config::Config::load_from_file
   --> src/utils/config.rs:331:5
    |
331 |     pub fn load() -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
359 |     pub fn load_from_file<P: AsRef<Path>>(path: P) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: variable does not need to be mutable
   --> src/core/analyzer.rs:392:13
    |
392 |         let mut file_path = contract_name.to_string();
    |             ----^^^^^^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `i`
   --> src/core/parser.rs:378:14
    |
378 |         for (i, line) in lines.iter().enumerate().skip(start_line) {
    |              ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `openai_key`
   --> src/utils/config.rs:388:19
    |
388 |         if let Ok(openai_key) = std::env::var("OPENAI_API_KEY") {
    |                   ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_openai_key`

warning: unused variable: `anthropic_key`
   --> src/utils/config.rs:392:19
    |
392 |         if let Ok(anthropic_key) = std::env::var("ANTHROPIC_API_KEY") {
    |                   ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_anthropic_key`

warning: unused variable: `etherscan_key`
   --> src/utils/config.rs:396:19
    |
396 |         if let Ok(etherscan_key) = std::env::var("ETHERSCAN_API_KEY") {
    |                   ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_etherscan_key`

warning: unused variable: `github_token`
   --> src/utils/config.rs:400:19
    |
400 |         if let Ok(github_token) = std::env::var("GITHUB_TOKEN") {
    |                   ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_github_token`

Some errors have detailed explanations: E0106, E0277, E0308, E0432, E0433, E0592, E0599, E0624, E0689.
For more information about an error, try `rustc --explain E0106`.
warning: `securechain` (bin "securechain") generated 30 warnings
error: could not compile `securechain` (bin "securechain") due to 41 previous errors; 30 warnings emitted