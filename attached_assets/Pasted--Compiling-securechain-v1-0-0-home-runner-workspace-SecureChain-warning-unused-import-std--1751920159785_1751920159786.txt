   Compiling securechain v1.0.0 (/home/runner/workspace/SecureChain)
warning: unused import: `std::path::PathBuf`
  --> src/main.rs:10:5
   |
10 | use std::path::PathBuf;
   |     ^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `commands::*`
 --> src/cli/mod.rs:8:9
  |
8 | pub use commands::*;
  |         ^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> src/core/analyzer.rs:8:5
  |
8 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `anyhow`
 --> src/core/parser.rs:6:14
  |
6 | use anyhow::{anyhow, Result};
  |              ^^^^^^

warning: unused import: `std::collections::HashMap`
 --> src/core/ai_assist.rs:9:5
  |
9 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `anyhow`
 --> src/core/fuzz_engine.rs:6:14
  |
6 | use anyhow::{anyhow, Result};
  |              ^^^^^^

warning: unused import: `std::collections::HashMap`
 --> src/core/fuzz_engine.rs:8:5
  |
8 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `analyzer::*`
  --> src/core/mod.rs:12:9
   |
12 | pub use analyzer::*;
   |         ^^^^^^^^^^^

warning: unused import: `fetcher::*`
  --> src/core/mod.rs:13:9
   |
13 | pub use fetcher::*;
   |         ^^^^^^^^^^

warning: unused import: `parser::*`
  --> src/core/mod.rs:14:9
   |
14 | pub use parser::*;
   |         ^^^^^^^^^

warning: unused import: `ai_assist::*`
  --> src/core/mod.rs:15:9
   |
15 | pub use ai_assist::*;
   |         ^^^^^^^^^^^^

warning: unused import: `fuzz_engine::*`
  --> src/core/mod.rs:16:9
   |
16 | pub use fuzz_engine::*;
   |         ^^^^^^^^^^^^^^

warning: unused import: `anyhow`
 --> src/plugins/evm.rs:6:14
  |
6 | use anyhow::{anyhow, Result};
  |              ^^^^^^

warning: unused import: `anyhow`
 --> src/plugins/move_lang.rs:6:14
  |
6 | use anyhow::{anyhow, Result};
  |              ^^^^^^

warning: unused import: `anyhow`
 --> src/plugins/cairo.rs:6:14
  |
6 | use anyhow::{anyhow, Result};
  |              ^^^^^^

warning: unused import: `anyhow`
 --> src/plugins/ink.rs:6:14
  |
6 | use anyhow::{anyhow, Result};
  |              ^^^^^^

warning: unused import: `AnalysisSummary`
  --> src/report/generator.rs:12:63
   |
12 | ...sResults, AnalysisMetrics, AnalysisSummary};
   |                               ^^^^^^^^^^^^^^^

warning: unused import: `generator::*`
 --> src/report/mod.rs:9:9
  |
9 | pub use generator::*;
  |         ^^^^^^^^^^^^

warning: unused import: `vulnerability::*`
  --> src/report/mod.rs:10:9
   |
10 | pub use vulnerability::*;
   |         ^^^^^^^^^^^^^^^^

warning: unused import: `config::*`
  --> src/utils/mod.rs:10:9
   |
10 | pub use config::*;
   |         ^^^^^^^^^

warning: unused import: `error::*`
  --> src/utils/mod.rs:11:9
   |
11 | pub use error::*;
   |         ^^^^^^^^

error[E0624]: method `generate_markdown_report` is private
   --> src/cli/commands.rs:249:46
    |
249 | ... = report_gen.generate_markdown_report(&results)?;
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^ private method
    |
   ::: src/report/generator.rs:706:5
    |
706 |     fn generate_markdown_report(&self, report: &ComprehensiveReport) -> Result<String...
    |     ---------------------------------------------------------------------------------- private method defined here

error[E0119]: conflicting implementations of trait `std::fmt::Display` for type `utils::error::BugForgeXError`
  --> src/utils/error.rs:10:10
   |
10 | #[derive(Error, Debug)]
   |          ^^^^^ conflicting implementation for `utils::error::BugForgeXError`
...
81 | impl fmt::Display for BugForgeXError {
   | ------------------------------------ first implementation here
   |
   = note: this error originates in the derive macro `Error` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `&std::string::String: Borrow<str>` is not satisfied
   --> src/report/generator.rs:252:50
    |
252 |             if let Some(vulns) = by_severity.get(*severity) {
    |                                              --- ^^^^^^^^^ the trait `Borrow<str>` is not implemented for `&std::string::String`
    |                                              |
    |                                              required by a bound introduced by this call
    |
    = help: the trait `Borrow<str>` is not implemented for `&std::string::String`
            but it is implemented for `std::string::String`
    = help: for that trait implementation, expected `std::string::String`, found `&std::string::String`
note: required by a bound in `HashMap::<K, V, S>::get`
   --> /nix/store/y5k023q95ndaiiw8f5x0krkgdvq54h6c-rust-mixed/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs:899:12
    |
897 |     pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
    |            --- required by a bound in this associated function
898 |     where
899 |         K: Borrow<Q>,
    |            ^^^^^^^^^ required by this bound in `HashMap::<K, V, S>::get`

Some errors have detailed explanations: E0119, E0277, E0624.
For more information about an error, try `rustc --explain E0119`.
warning: `securechain` (bin "securechain") generated 21 warnings
error: could not compile `securechain` (bin "securechain") due to 3 previous errors; 21 warnings emitted